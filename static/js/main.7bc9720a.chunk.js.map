{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MyDropZone","useState","imageURLs","setImageURLs","onDrop","useCallback","acceptedFiles","reader","FileReader","forEach","file","onabort","console","log","onerror","onload","e","buf","Uint8Array","currentTarget","result","thumbnail","dcraw","extractThumbnail","blob","Blob","type","imageUrl","URL","createObjectURL","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","length","map","u","src","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wiBAMMA,EAAa,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAASC,uBAAY,SAACC,GAE1B,IAAMC,EAAS,IAAIC,WACnBF,EAAcG,SAAQ,SAACC,GACrBH,EAAOI,QAAU,kBAAMC,QAAQC,IAAI,yBACnCN,EAAOO,QAAU,kBAAMF,QAAQC,IAAI,4BACnCN,EAAOQ,OACE,SAAUC,GACf,IAAMC,EAAM,IAAIC,WAAWF,EAAEG,cAAcC,QACrCC,EAAYC,EAAML,EAAK,CAAEM,kBAAkB,IAC3CC,EAAO,IAAIC,KAAK,CAACJ,GAAY,CAAEK,KAAM,eACrCC,EAAWC,IAAIC,gBAAgBL,GACrCZ,QAAQC,IAAI,UAAWc,GACvBxB,EAAa,GAAD,mBAAKD,GAAL,CAAgByB,MAShCpB,EAAOuB,kBAAkBpB,QAI1B,IAEH,EAAsDqB,YAAY,CAAE3B,WAA5D4B,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aACrC,OACE,gDAASF,KAAT,cACE,qCAAWC,MAEV/B,EAAUiC,OACT,8BACGjC,EAAUkC,KAAI,SAACC,GAAD,OACb,qBAAKC,IAAKD,SAId,sBAAKE,UAAU,iBAAf,UACE,mBAAGA,UAAU,iBAAb,yCACA,oBAAGA,UAAU,KAAb,oDAEE,uBAFF,uCAKCL,EACC,uDAEA,gGAYGM,MAJf,WACE,OAAO,qBAAKD,UAAU,MAAf,SAAsBvC,OCvDhByC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7bc9720a.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport * as dcraw from \"dcraw\";\n\nimport \"./App.css\";\n\nconst MyDropZone = () => {\n  const [imageURLs, setImageURLs] = useState([]);\n  const onDrop = useCallback((acceptedFiles) => {\n    // let imageURLs = [];\n    const reader = new FileReader();\n    acceptedFiles.forEach((file) => {\n      reader.onabort = () => console.log(\"file reading aborted\");\n      reader.onerror = () => console.log(\"file reading has failed\");\n      reader.onload = (function (o) {\n        return function (e) {\n          const buf = new Uint8Array(e.currentTarget.result);\n          const thumbnail = dcraw(buf, { extractThumbnail: true });\n          const blob = new Blob([thumbnail], { type: \"image/jpeg\" });\n          const imageUrl = URL.createObjectURL(blob);\n          console.log(\"img url\", imageUrl);\n          setImageURLs([...imageURLs, imageUrl]);\n          // imageURLs.append(imageUrl);\n          // dropzoneRef.current.innerHTML = (\n          //   <div>\n          //     <img src={imageUrl} />\n          //   </div>\n          // );\n        };\n      })(file);\n      reader.readAsArrayBuffer(file);\n    });\n\n    // console.log(\"IMAGE URL ARRAY\", imageURLs);\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n      {/* <p ref={dropzoneRef}> */}\n      {imageURLs.length ? (\n        <div>\n          {imageURLs.map((u) => (\n            <img src={u} />\n          ))}\n        </div>\n      ) : (\n        <div className=\"dropzone white\">\n          <p className=\"f1 fw9 measure\">FREE ONLINE RAW FILE VIEWER</p>\n          <p className=\"f3\">\n            Simple, quick, convenient - 0 wait time\n            <br />\n            Remove the hassle of downloading!\n          </p>\n          {isDragActive ? (\n            <p>Drop the files here...</p>\n          ) : (\n            <p>Drag 'n' drop some files here, or click to select files</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction App() {\n  return <div className=\"App\">{MyDropZone()}</div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}